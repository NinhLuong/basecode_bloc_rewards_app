// Mocks generated by Mockito 5.4.6 from annotations
// in magic_rewards/test/unit_test/features/home/presentation/bloc/home_bloc/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:magic_rewards/config/errors/failure.dart' as _i6;
import 'package:magic_rewards/features/home/domain/entities/home_entity.dart'
    as _i7;
import 'package:magic_rewards/features/home/domain/parameters/home_parameters.dart'
    as _i8;
import 'package:magic_rewards/features/home/domain/repository/home_repository.dart'
    as _i2;
import 'package:magic_rewards/features/home/domain/usecases/get_home_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeRepository_0 extends _i1.SmartFake
    implements _i2.HomeRepository {
  _FakeHomeRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetHomeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHomeUseCase extends _i1.Mock implements _i4.GetHomeUseCase {
  MockGetHomeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get homeRepository =>
      (super.noSuchMethod(
            Invocation.getter(#homeRepository),
            returnValue: _FakeHomeRepository_0(
              this,
              Invocation.getter(#homeRepository),
            ),
          )
          as _i2.HomeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.HomeEntity>> call({
    required _i8.HomeParameters? params,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#params: params}),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.HomeEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.HomeEntity>(
                    this,
                    Invocation.method(#call, [], {#params: params}),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.HomeEntity>>);
}
